/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id("io.freefair.lombok") version "8.0.1"
    id 'com.google.cloud.tools.jib' version '3.3.1'
    id 'org.openrewrite.rewrite' version '5.39.0'
}

application {
    mainClass = 'tsp.price.Application'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter:3.0.5'
    api 'org.springframework.boot:spring-boot-starter-web:3.0.5'
    api 'org.springframework.boot:spring-boot-configuration-processor:3.0.5'
    api 'org.projectlombok:lombok:1.18.26'
    api 'com.google.guava:guava:31.1-jre'
    api 'javax.annotation:jsr250-api:1.0'
    api 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.700'
    api 'info.picocli:picocli-spring-boot-starter:4.7.1'
    api 'net.sourceforge.htmlunit:htmlunit:2.65.1'
    api 'com.rometools:rome:2.1.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.0.5'
    testImplementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
    rewrite platform('org.openrewrite.recipe:rewrite-recipe-bom:1.18.0')
    rewrite('org.openrewrite.recipe:rewrite-spring')
}

java.sourceCompatibility = JavaVersion.VERSION_17

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

jib {
  from {
    image = 'gcr.io/distroless/java17-debian11'
    platforms {
        platform {
            architecture = 'amd64'
            os = 'linux'
        }
        platform {
            architecture = 'arm64'
            os = 'linux'
        }
    }
  }
  to {
    image = "${registry}/${group}.${rootProject.name}"
    tags = [version]
  }
  container {
    environment = [TZ:timezone]
    //format = 'OCI'
  }

}

rewrite {
    activeRecipe(
        'org.openrewrite.java.spring.boot3.UpgradeSpringBoot_3_0',
        'org.openrewrite.java.migrate.guava.NoGuava',
        'org.openrewrite.java.migrate.UpgradeToJava17',
        'org.openrewrite.java.migrate.JavaVersion17',
        'org.openrewrite.java.migrate.lombok.UpdateLombokToJava17',
        //'org.openrewrite.java.logging.log4j.ParameterizedLogging',
        'org.openrewrite.java.migrate.lang.StringFormatted',
        'org.openrewrite.java.cleanup.FixStringFormatExpressions',
        'tsp.price.packages'
    )
}

tasks.build.dependsOn tasks.rewriteRun
tasks.build.dependsOn tasks.jib

// TODO external properties (registry, base image)
